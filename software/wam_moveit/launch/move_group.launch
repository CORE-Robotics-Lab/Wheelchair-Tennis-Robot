<launch>
  <arg name="pipeline" default="ompl" />
  <!-- <arg name="pipeline" default="pilz_industrial_motion_planner" /> -->

  <arg name="DOF" default="7" />

  <include file="$(find wam_moveit)/launch/planning_context.launch" >
    <arg name="DOF" value="$(arg DOF)"/>
  </include>

  <arg name="joint_states_topic" default="/joint_states"/>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="moveit_manage_controllers" default="true" />

  <!-- Planning Pipelines -->
  <group ns="move_group/planning_pipelines">

    <!-- OMPL -->
    <include ns="ompl" file="$(find wam_moveit)/launch/planning_pipeline.launch">
      <arg name="pipeline" value="ompl" />
    </include>

    <!-- Pilz Industrial Motion-->
    <!-- <include ns="pilz_industrial_motion_planner" file="$(find wam_moveit)/launch/planning_pipeline.launch">
      <arg name="pipeline" value="pilz_industrial_motion_planner" />
    </include> -->

    <!-- Load non-default planner if passed as parameter -->
    <!-- <include if="$(eval arg('pipeline') not in ['ompl', 'pilz_industrial_motion_planner'])" ns="$(arg pipeline)"
             file="$(find wam_moveit)/launch/planning_pipeline.launch">
      <arg name="pipeline" value="$(arg pipeline)" />
    </include> -->
  </group>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find wam_moveit)/launch/trajectory_execution.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="wam" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    <arg name="DOF" value="$(arg DOF)"/>
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find wam_moveit)/launch/sensor_manager.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="wam" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <remap from="joint_states" to="$(arg joint_states_topic)"/>

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="default_planning_pipeline" value="$(arg pipeline)" />


    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				      move_group/MoveGroupExecuteTrajectoryAction
				      move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupPlanService
				      move_group/MoveGroupQueryPlannersService
				      move_group/MoveGroupStateValidationService
				      move_group/MoveGroupGetPlanningSceneService
				      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

  <include file="$(find prbt_hardware_support)/launch/fake_operation_mode_setup.launch" />

</launch>
